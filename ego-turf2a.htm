<html>
<head>
 <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
   integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
   crossorigin=""/>
 <!-- Make sure you put this AFTER Leaflet's CSS -->
 <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
   integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
   crossorigin=""></script>
    <script src="https://npmcdn.com/@turf/turf@6.3.0/turf.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" 
    crossorigin="anonymous"></script>
   <style>
#map {
  height: 500px;
}

.leaflet-top .leaflet-control {
    margin-top: 400;
}

.leaflet-control-attribution    {
    display:none;
}
   </style>

</head>
<body>
<div id="map"></div>
</body>
   <script>

L.CursorHandler = L.Handler.extend({

addHooks: function () {
    this._popup = new L.Popup();
    this._map.on('mouseover', this._open, this);
    this._map.on('mousemove', this._update, this);
    this._map.on('mouseout', this._close, this);
},

removeHooks: function () {
    this._map.off('mouseover', this._open, this);
    this._map.off('mousemove', this._update, this);
    this._map.off('mouseout', this._close, this);
},

_open: function (e) {
    this._update(e);
    this._popup.openOn(this._map);
},

_close: function () {
    this._map.closePopup(this._popup);
},

_update: function (e) {
    this._popup.setLatLng(e.latlng)
        .setContent(e.latlng.toString());
}


});

L.Map.addInitHook('addHandler', 'cursor', L.CursorHandler);



var map = L.map("map", ({ scrollWheelZoom: false }), {
    cursor: true
}).setView([51.995820925789836, -1.5818595886230467], 15);
L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(map);
    
    function highlightFeature(e) {
        var layer = e.target;

    layer.setStyle({
        weight: 2,
        color: 'red',
        fillOpacity: 0.4
    });

    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
        layer.bringToFront();
    }
};

var i = 0;
var c = 0;
var r = 0;
var features = [];
var fixedtllng = -1.608896;
var tllng = fixedtllng;
var tolat = 52.002353;
var fixedtrlng = -1.608381;
var trlng = fixedtrlng;
var bolat = 52.001980;
var latgap = tolat - bolat;
var lnggap = trlng - tllng;

while (r <= 34){
    temp = 
        {
                "type": "Feature",
                "properties": {},
                "geometry": {
                    "type": "Polygon",
                    "coordinates": [
                        [
                            [tllng,tolat],
                            [trlng,tolat],
                            [trlng,bolat],
                            [tllng,bolat],
                            [tllng,tolat]
                        ]
                    ]
                }
            }
    features.push(temp);
    tllng = trlng;
    trlng += lnggap;
    c++;
    i++;
    if (c == 105){
        c = 0;
        r++;
        trlng = fixedtrlng;
        tllng = fixedtllng;
        tolat = bolat;
        bolat -= latgap;
    }
}
console.log(features)

    var geojson = {
        "type": "FeatureCollection",
        "features": features
    };

  

function resetHighlight(e) {
    var layer = e.target;

    layer.setStyle({
        weight: 2,
        color: 'grey',
        fillOpacity: 0.1
})
};

/*function popup(e)  {
    var layer = e.target;

    layer.popup({

    })
}*/

function onEachFeature(feature, layer) {
    layer.on({
        mouseover: highlightFeature,
        mouseout: resetHighlight
    });
}



/*geojson = L.geoJson(statesData, {
    style: style,
    onEachFeature: onEachFeature
}).addTo(map);*/


    L.geoJSON(geojson, {
        style: function(feature)    {
            return  {
                color: 'grey',
                weight: 2,
                fillOpacity: 0.1 
            }
        },
            onEachFeature: function(feature, layer) {
                layer.on({
                    mouseover: highlightFeature,
                    mouseout: resetHighlight,
        });
        },
    }).addTo(map);

    var popup = L.popup();

function onMapClick(e) {
    popup
        .setLatLng(e.latlng)
        .setContent("You clicked the map at " + e.latlng.toString())
        .openOn(map);
}

map.on('click', onMapClick);



//drawGrid();

  //map.whenReady(drawGrid);
  /*map.on('move', redrawLayer);*/

/*function drawGrid(){
	if (map.getZoom() > 15){
		// GRID
		var bbox = map.getBounds().toBBoxString().split(',').map(Number);
		var cellSide = 0.01;
		//var mask = polyLayer.toGeoJSON().features[0];
		var options = {
			units: 'kilometers',
			//mask: mask
		};

		var squareGrid = turf.squareGrid(bbox, cellSide, options);
var pins = [];
turf.featureEach(squareGrid, function (cell, idx) {
	//console.log(cell);
	var pin = turf.centroid(cell, {"marker-color": "#00F"});
    pins.push(pin);
	//console.log(pin);
});*/
		

		//return the grid to the gridLayer object
        /*return L.geoJSON(squareGrid, {color: "#008800", weight: 1, fill:0}).addTo(map);
		//map.fitBounds(gridLayer.getBounds());
	} else {
	//return an empty layer that can be filled with a grid when we are at the correct zoom
		return L.geoJSON().addTo(map);
	}
}*/

/*let gridLayer = drawGrid()

function redrawLayer(){
  map.removeLayer(gridLayer);
  gridLayer = drawGrid();
}*/

/*featureEach.on('mouseover', function () {
        style: {
            fillColor: "red";
        }
    })*/

/*function highlightFeature(e) {
    var layer = e.target;

    layer.setStyle({
        weight: 0.5,
        fillColor: 'red',
        dashArray: '',
        fillOpacity: 0.5
    });

    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
        layer.bringToFront();
    }
}

function resetHighlight(e) {
    geojson.resetStyle(e.target);
}

function onEachFeature(feature, layer) {
    layer.on({
        mouseover: highlightFeature,
        mouseout: resetHighlight
    });
}

geojson = L.geoJson(statesData, {
    style: style,
    onEachFeature: onEachFeature
}).addTo(map);*/


/*if(feature.geometry.type==='Polygon')   {
                    layer.bindPopup(feature.geometry.coordinates.join(','));*/
</script>
</html>
